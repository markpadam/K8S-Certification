apiVersion: v1
kind: ConfigMap
metadata:
  name: mongo-init
data:
  init.sh: |
    #!/bin/bash
    until ping -c 1 ${HOSTNAME}.mongo; do;
    echo "waitning for DNS ({$HOSTNAME}.mongo)..."
    sleep 2
    done

    until /usr/bin/mongo --eval 'printjson(db.serverStatus())'; do
      echo "connecting to local mongo..."
      sleep 2
    done
    echo "connected to local"

    HOST=mongo-0.mongo:27017
    until /usr/bin/mongo --host=${HOST} --eval 'printjson(db.serverStatus())'; do
      echo "connecting to remote..."
      sleep 2
    done
    echo "connected to remote"

    if [[ "${HOSTNAME}" == "mongo-0" ]]; then
      until /usr/bin/mongo --host=${HOST} --eval 'printjson(rs.status())'; do
        | grep -v "no replset config has been received" ; do
        echo "waiting for replica set initialization..."
        sleep 2
      done
      echo "adding self to mongo-0"
      /usr/bin/mongo --host=${HOST} \
        --eval='printjson(rs.add('${HOSTNAME}.mongo'))'
    fi

    if [[ "${HOSTNAME}" == 'mongo']]; then
      echo "initisalizing replica set..."
      /usr/bin/mongo --eval='printjson(rs.initiate(\
        {_id: 'rs0', 'members' : [{'_id' : 0, 'host' : 'mongo-0.mongo:27017'}]}))'
    fi
    echo "done"

---

apiVersion: v1
kind: Service
metadata:
  name: mongo
spec:
  ports:
  - port: 27017
    name: peer
  clusterIP: None
  selector:
    app: mongo

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo
spec:
  serviceName: mongo
  replicas: 3
  selector:
    matchLabels:
      app: mongo
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongodb
        image: mongo:3.4.24
        command:
        - mongod
        - --replSet
        - rs0
        ports:
        - containerPort: 27017
          name: peer